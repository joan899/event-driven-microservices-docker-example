services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.7.4

  articles-management:
    develop:
      watch:
        - action: rebuild
          path: ./services/articles-management
    restart: always
    container_name: articles-management
    build:
      context: ./services/articles-management
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      - mongofalcone
      - rabbitmq
    env_file: "app.env"

  notification:
    develop:
      watch:
        - action: rebuild
          path: ./services/notification
    restart: always
    container_name: notification
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    environment:
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      - rabbitmq
    env_file: "app.env"

  authentication:
    develop:
      watch:
        - action: rebuild
          path: ./services/authentication
    restart: always
    container_name: authentication
    build:
      context: ./services/authentication
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
    environment:
      - PORT=3000
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      - mongofalcone
      - rabbitmq
    env_file: "app.env"

  user-management:
    develop:
      watch:
        - action: rebuild
          path: ./services/user-management
    restart: always
    container_name: user-management
    build:
      context: ./services/user-management
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    environment:
      - PORT=3000
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      - mongofalcone
      - rabbitmq
    env_file: "app.env"

  events-management:
    develop:
      watch:
        - action: rebuild
          path: ./services/events-management
    restart: always
    container_name: events-management
    build:
      context: ./services/events-management
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - PORT=3000
      - MESSAGE_BUS=amqp://rabbitmq
    depends_on:
      - mongofalcone
      - rabbitmq
    env_file: "app.env"

  mongofalcone:
    image: mongo
    restart: always
    container_name: mongofalcone
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=falcon
      - MONGO_INITDB_DATABASE=auth
      - MONGO_INITDB_ROOT_PASSWORD=Falconerocks
    volumes:
      - ./mongo_data/:/data/db/

volumes:
  mongo_data: